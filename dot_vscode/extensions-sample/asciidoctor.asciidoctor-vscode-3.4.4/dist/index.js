(()=>{var e={858:(e,t,n)=>{var i="Expected a function",o=NaN,r="[object Symbol]",s=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,l=/^0o[0-7]+$/i,u=parseInt,d="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,f="object"==typeof self&&self&&self.Object===Object&&self,g=d||f||Function("return this")(),v=Object.prototype.toString,p=Math.max,m=Math.min,h=function(){return g.Date.now()};function w(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function b(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&v.call(e)==r}(e))return o;if(w(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=w(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var n=c.test(e);return n||l.test(e)?u(e.slice(2),n?2:8):a.test(e)?o:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError(i);return w(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),function(e,t,n){var o,r,s,a,c,l,u=0,d=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError(i);function v(t){var n=o,i=r;return o=r=void 0,u=t,a=e.apply(i,n)}function y(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-u>=s}function S(){var e=h();if(y(e))return E(e);c=setTimeout(S,function(e){var n=t-(e-l);return f?m(n,s-(e-u)):n}(e))}function E(e){return c=void 0,g&&o?v(e):(o=r=void 0,a)}function L(){var e=h(),n=y(e);if(o=arguments,r=this,l=e,n){if(void 0===c)return function(e){return u=e,c=setTimeout(S,t),d?v(e):a}(l);if(f)return c=setTimeout(S,t),v(l)}return void 0===c&&(c=setTimeout(S,t)),a}return t=b(t)||0,w(n)&&(d=!!n.leading,s=(f="maxWait"in n)?p(b(n.maxWait)||0,t):s,g="trailing"in n?!!n.trailing:g),L.cancel=function(){void 0!==c&&clearTimeout(c),u=0,o=l=r=c=void 0},L.flush=function(){return void 0===c?a:E(h())},L}(e,t,{leading:o,maxWait:t,trailing:r})}},511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ActiveLineMarker=void 0;const i=n(898);t.ActiveLineMarker=class{onDidChangeTextEditorSelection(e){const{previous:t}=(0,i.getElementsForSourceLine)(e);this._update(t&&t.element)}_update(e){this._unmarkActiveElement(this._current),this._markActiveElement(e),this._current=e}_unmarkActiveElement(e){e&&(e.className=e.className.replace(/\bcode-active-line\b/g,""))}_markActiveElement(e){e&&(e.className+=" code-active-line")}}},244:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onceDocumentLoaded=void 0,t.onceDocumentLoaded=function(e){"loading"===document.readyState||"uninitialized"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()}},461:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createPosterForVsCode=void 0;const i=n(256);t.createPosterForVsCode=e=>new class{postMessage(t,n){e.postMessage({type:t,source:(0,i.getSettings)().source,body:n})}}},898:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEditorLineNumberForPageOffset=t.scrollToRevealSourceLine=t.getLineElementsAtPageOffset=t.getElementsForSourceLine=void 0;const i=n(256);function o(e){return t=(0,i.getSettings)().lineCount-1,n=e,Math.min(t,Math.max(0,n));var t,n}const r=(()=>{let e;return()=>(e||(e=Array.prototype.map.call(document.querySelectorAll('div[class^="data-line-"], div[class*=" data-line-"]'),(e=>{const t=e.className.split(" ").pop().match(/data-line-(\d+)/)[1];return{element:e,line:parseInt(t)}})).filter((e=>!isNaN(e.line)))),e)})();function s(e){const t=Math.floor(e+1),n=r();let i=n[0]||null;for(const e of n){if(e.line===t)return{previous:e,next:void 0};if(e.line>t)return{previous:i,next:e};i=e}return{previous:i}}function a(e){const t=r(),n=e-window.scrollY;let i=-1,o=t.length-1;for(;i+1<o;){const e=Math.floor((i+o)/2),r=t[e].element.getBoundingClientRect();r.top+r.height>=n?o=e:i=e}const s=t[o],a=s.element.getBoundingClientRect();return o>=1&&a.top>n?{previous:t[i],next:s}:{previous:s}}t.getElementsForSourceLine=s,t.getLineElementsAtPageOffset=a,t.scrollToRevealSourceLine=function(e){const{previous:t,next:n}=s(e);if(t&&(0,i.getSettings)().scrollPreviewWithEditor){let i=0;const o=t.element.getBoundingClientRect().top;if(n&&n.line!==t.line){const r=(e-t.line)/(n.line-t.line),s=n.element.getBoundingClientRect().top-o;i=window.scrollY+o+r*s}else i=0===e?0:window.scrollY+o;window.scroll(0,Math.max(1,i))}},t.getEditorLineNumberForPageOffset=function(e){const{previous:t,next:n}=a(e);if(t){const i=t.element.getBoundingClientRect(),r=e-window.scrollY-i.top;if(n){const e=r/(n.element.getBoundingClientRect().top-i.top);return o(t.line+e*(n.line-t.line))}{const e=r/i.height;return o(t.line+e)}}return null}},256:(e,t)=>{"use strict";let n;function i(e){const t=document.getElementById("vscode-asciidoc-preview-data");if(t){const n=t.getAttribute(e);if(n)return JSON.parse(n)}throw new Error(`Could not load data for ${e}`)}Object.defineProperty(t,"__esModule",{value:!0}),t.getSettings=t.getData=void 0,t.getData=i,t.getSettings=function(){if(n)return n;if(n=i("data-settings"),n)return n;throw new Error("Could not load settings")}}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";const e=n(511),t=n(244),i=n(461),o=n(898),r=n(256),s=n(858);let a=!0;const c=new e.ActiveLineMarker,l=(0,r.getSettings)(),u=acquireVsCodeApi(),d=u.getState(),f=Object.assign(Object.assign(Object.assign({},l),"object"==typeof d?d:{}),(0,r.getData)("data-state"));u.setState(f);const g=(0,i.createPosterForVsCode)(u);window.cspAlerter.setPoster(g),window.styleLoadingMonitor.setPoster(g),window.onload=()=>{p()},(0,t.onceDocumentLoaded)((()=>{const e=!l.preservePreviewWhenHidden;if(e&&window.addEventListener("scroll",s((()=>{u.setState(Object.assign(Object.assign({},u.getState()),{scrollX:window.scrollX,scrollY:window.scrollY}))}),250,{leading:!0,trailing:!0})),l.scrollPreviewWithEditor)setTimeout((()=>{const e=u.getState().line;isNaN(e)||(a=!0,(0,o.scrollToRevealSourceLine)(e))}),0);else if(e){const{scrollX:e,scrollY:t}=u.getState(),n={top:t,left:e,behavior:"auto"};window.scrollTo(n)}}));const v=(()=>{const e=s((e=>{a=!0,(0,o.scrollToRevealSourceLine)(e)}),50);return t=>{isNaN(t)||(u.setState(Object.assign(Object.assign({},u.getState()),{line:t})),e(t))}})(),p=s((()=>{const e=[],t=document.getElementsByTagName("img");if(t&&t.length>0){let n;for(n=0;n<t.length;n++){const i=t[n];i.classList.contains("loading")&&i.classList.remove("loading"),e.push({id:i.id,height:i.height,width:i.width})}g.postMessage("cacheImageSizes",e)}}),50);window.addEventListener("resize",(()=>{a=!0,p()}),!0),window.addEventListener("message",(e=>{if(e.data.source===l.source)switch(e.data.type){case"onDidChangeTextEditorSelection":{const t=e.data.line;c.onDidChangeTextEditorSelection(t),u.setState(Object.assign(Object.assign({},u.getState()),{line:t}));break}case"updateView":v(e.data.line)}}),!1);const m=["http:","https:","mailto:","vscode:","vscode-insiders:"];document.addEventListener("click",(e=>{if(!e)return;let t=e.target;for(;t;){if(t.tagName&&"A"===t.tagName&&t.href){if(t.getAttribute("href").startsWith("#"))return;let n=t.getAttribute("data-href");if(!n){if(m.some((e=>t.href.startsWith(e))))return;n=t.getAttribute("href")}return!/^[a-z-]+:\/\//i.test(n)||n.startsWith("file:///")?(g.postMessage("clickLink",{href:n}),e.preventDefault(),void e.stopPropagation()):void 0}t=t.parentNode}}),!0),window.addEventListener("scroll",s((()=>{const e=(0,o.getEditorLineNumberForPageOffset)(window.scrollY);u.setState(Object.assign(Object.assign({},u.getState()),{line:e})),l.scrollEditorWithPreview&&(a?a=!1:0===window.scrollY?g.postMessage("revealLine",{line:0}):"number"!=typeof e||isNaN(e)||g.postMessage("revealLine",{line:e}))}),50))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,