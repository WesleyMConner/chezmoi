(()=>{"use strict";var e={295:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CspAlerter=void 0;const o=s(256),n=s(915);t.CspAlerter=class{constructor(){this.didShow=!1,this.didHaveCspWarning=!1,document.addEventListener("securitypolicyviolation",(()=>{this.onCspWarning()})),window.addEventListener("message",(e=>{e&&e.data&&"vscode-did-block-svg"===e.data.name&&this.onCspWarning()}))}setPoster(e){this.messaging=e,this.didHaveCspWarning&&this.showCspWarning()}onCspWarning(){this.didHaveCspWarning=!0,this.showCspWarning()}showCspWarning(){const e=(0,n.getStrings)(),t=(0,o.getSettings)();if(this.didShow||t.disableSecurityWarnings||!this.messaging)return;this.didShow=!0;const s=document.createElement("a");s.innerText=e.cspAlertMessageText,s.setAttribute("id","code-csp-warning"),s.setAttribute("title",e.cspAlertMessageTitle),s.setAttribute("role","button"),s.setAttribute("aria-label",e.cspAlertMessageLabel),s.onclick=()=>{this.messaging.postMessage("showPreviewSecuritySelector",{source:t.source})},document.body.appendChild(s)}}},561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StyleLoadingMonitor=void 0,t.StyleLoadingMonitor=class{constructor(){this.unloadedStyles=[],this.finishedLoading=!1;const e=e=>{const t=e.target.dataset.source;this.unloadedStyles.push(t)};window.addEventListener("DOMContentLoaded",(()=>{for(const t of document.getElementsByClassName("code-user-style"))t.dataset.source&&(t.onerror=e)})),window.addEventListener("load",(()=>{this.unloadedStyles.length&&(this.finishedLoading=!0,this.poster&&this.poster.postMessage("previewStyleLoadError",{unloadedStyles:this.unloadedStyles}))}))}setPoster(e){this.poster=e,this.finishedLoading&&e.postMessage("previewStyleLoadError",{unloadedStyles:this.unloadedStyles})}}},256:(e,t)=>{let s;function o(e){const t=document.getElementById("vscode-asciidoc-preview-data");if(t){const s=t.getAttribute(e);if(s)return JSON.parse(s)}throw new Error(`Could not load data for ${e}`)}Object.defineProperty(t,"__esModule",{value:!0}),t.getSettings=t.getData=void 0,t.getData=o,t.getSettings=function(){if(s)return s;if(s=o("data-settings"),s)return s;throw new Error("Could not load settings")}},915:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getStrings=void 0,t.getStrings=function(){const e=document.getElementById("vscode-asciidoc-preview-data");if(e){const t=e.getAttribute("data-strings");if(t)return JSON.parse(t)}throw new Error("Could not load strings")}}},t={};function s(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,s),i.exports}(()=>{const e=s(295),t=s(561);window.cspAlerter=new e.CspAlerter,window.styleLoadingMonitor=new t.StyleLoadingMonitor})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,